# ===============================================================================
#        _                       _
#   __ _| | __ _ _ __   ___ _ __(_) __ ___  ___   _ ____
#  / _` | |/ _` | '_ \ / __| '__| |/ _` \ \/ / | | |_  /
# | (_| | | (_| | | | | (__| |  | | (_| |>  <| |_| |/ /
#  \__,_|_|\__,_|_| |_|\___|_|  |_|\__,_/_/\_\\__, /___|
#                                             |___/
# ===============================================================================
#
# IMPORTANTE:
#
# Modifique essas configurações APENAS se você tiver certeza do que está fazendo.
#
# ===============================================================================
#
# REQUISITOS NECESSÁRIOS:
#
# É extremamente importante seguir os seguintes passos:
#
# 1. Crie o arquivo necessário para armazenar os certificados SSL:
#    $ touch acme.json
#
# 2. Defina as permissões corretas para o arquivo `acme.json`:
#    $ sudo chmod 600 acme.json
#
# 3. Procure a linha abaixo e substitua pelo seu e-mail:
#    - `--certificatesresolvers.leresolver.acme.email=seuemail@example.com
#
# Só então execute o comando:
#    $ docker-compose -f traefik-docker-compose.yml up -d
#
# ===============================================================================

# Define os serviços que serão executados no Docker
services:

  # Serviço Traefik, que funciona como um proxy reverso
  traefik:

    # Usando a versão mais recente da imagem do Traefik
    image: "traefik:latest"
    
    # Nome do container para facilitar identificação
    container_name: traefik

    # Reinicia automaticamente o container em caso de falha
    restart: always

    # Comandos específicos a serem executados ao iniciar o container
    command:
      
      # Configura a porta 80 (HTTP)
      - --entrypoints.web.address=:80

      # Configura a porta 443 (HTTPS)
      - --entrypoints.websecure.address=:443

      # Habilita a integração do Traefik com Docker
      - --providers.docker

      # Define o nível de logs para mostrar apenas erros
      - --log.level=ERROR

      # Configura para usar certificados HTTPS automáticos (Let's Encrypt)
      - --certificatesresolvers.leresolver.acme.httpchallenge=true

      # E-mail para registrar os certificados
      # Substitua 'seuemail@example.com' pelo seu próprio e-mail
      - --certificatesresolvers.leresolver.acme.email=seuemail@example.com

      # Monta o arquivo de certificados para o Traefik usar
      - --certificatesresolvers.leresolver.acme.storage=./acme.json

      # Define que o desafio de verificação será pela porta 80 (HTTP)
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web      

    # Volumes compartilhados
    volumes:

      # Permite que o Traefik acesse o Docker para detectar novos containers
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

      # Permite que o Traefik acesse o arquivo de certificados
      - "./acme.json:/acme.json"

    # Mapeamento de portas
    ports:

      # Mapeia a porta 80 do container para a porta 80 do host (HTTP)
      - "80:80"

      # Mapeia a porta 443 do container para a porta 443 do host (HTTPS)
      - "443:443"      
      
    # Labels para configurar o Traefik
    labels:

      # Redireciona todas as requisições HTTP para HTTPS
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"

      # Define o ponto de entrada para o redirecionamento como HTTP
      - "traefik.http.routers.http-catchall.entrypoints=web"

      # Aplica o middleware de redirecionamento para HTTPS
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

    # Redes específicas para o serviço Traefik
    networks:
      - traefik

# Define as redes que serão usadas pelos serviços
networks:
  traefik:
    name: traefik
