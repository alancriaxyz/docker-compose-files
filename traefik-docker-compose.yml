# ==============================================================================
#        _                       _
#   __ _| | __ _ _ __   ___ _ __(_) __ ___  ___   _ ____
#  / _` | |/ _` | '_ \ / __| '__| |/ _` \ \/ / | | |_  /
# | (_| | | (_| | | | | (__| |  | | (_| |>  <| |_| |/ /
#  \__,_|_|\__,_|_| |_|\___|_|  |_|\__,_/_/\_\\__, /___|
#                                             |___/
# ==============================================================================
# IMPORTANTE:
# As variáveis e configurações comentadas neste arquivo permitem que o Traefik
# seja acessado via web. Modifique essas configurações APENAS se você tiver 
# certeza do que está fazendo, pois podem expor sua aplicação à internet.
# ==============================================================================
# REQUISITOS NECESSÁRIOS:
#
# Antes de executar `docker-compose -f traefik-docker-compose.yml up -d`
#
# É extremamente importante seguir os seguintes passos:
#
# 1. Crie o arquivo necessário para armazenar os certificados SSL:
#    $ touch acme.json
#
# 2. Defina as permissões corretas para o arquivo `acme.json`:
#    $ sudo chmod 600 acme.json
#
# 3. Crie a rede Docker chamada: traefik
#    $ docker network create traefik
#
# Só então execute o comando:
#    $ docker-compose -f traefik-docker-compose.yml up -d
#
# ==============================================================================

# Define os serviços que serão executados no Docker
services:

  # Serviço Traefik, que funciona como um proxy reverso
  traefik:

    # Nome do container para facilitar identificação
    container_name: traefik

    # Usando a versão mais recente da imagem do Traefik
    image: "traefik:latest"

    # Reinicia automaticamente o container em caso de falha
    restart: always

    # Volumes compartilhados
    volumes:

      # Permite que o Traefik acesse o Docker para detectar novos containers
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      
      # Monta o arquivo de certificados para o Traefik usar
      # Primeiro, crie o arquivo com 'touch acme.json'
      # Em seguida, defina as permissões corretas com 'sudo chmod 600 acme.json'
      - "./acme.json:/acme.json"

    # Variáveis de ambiente
    environment:
    
      # Define o fuso horário do container
      - TZ=America/Sao_Paulo

    # Comandos específicos a serem executados ao iniciar o container
    command:
      # Habilita a integração do Traefik com Docker
      - --providers.docker

      # Define a rede do Docker que o Traefik vai usar
      - --providers.docker.network=traefik

      # Define o nível de logs para mostrar apenas erros
      - --log.level=ERROR

      # Configura para usar certificados HTTPS automáticos (Let's Encrypt)
      - --certificatesresolvers.leresolver.acme.httpchallenge=true

      # E-mail para registrar os certificados
      # Substitua 'seuemail@example.com' pelo seu próprio e-mail
      - --certificatesresolvers.leresolver.acme.email=seuemail@example.com

      # Monta o arquivo de certificados para o Traefik usar
      - --certificatesresolvers.leresolver.acme.storage=/acme.json

      # Define que o desafio de verificação será pela porta 80 (HTTP)
      - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web

      # Configura a porta 80 (HTTP)
      # - --entrypoints.web.address=:80

      # Configura a porta 443 (HTTPS)
      # - --entrypoints.websecure.address=:443

      # Habilita o painel de controle do Traefik
      # - --api.dashboard=true      

    # Mapeamento de portas
    #ports:

      # Mapeia a porta 80 do container para a porta 80 do host (HTTP)
      # - "80:80"

      # Mapeia a porta 443 do container para a porta 443 do host (HTTPS)
      # - "443:443"      

    # Labels para configuração do Traefik
    #labels:
      # Redireciona todas as requisições HTTP para HTTPS
      # - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"

      # Define o ponto de entrada para o redirecionamento como HTTP
      # - "traefik.http.routers.http-catchall.entrypoints=web"

      # Aplica o middleware de redirecionamento para HTTPS
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # Define o esquema de redirecionamento para HTTPS
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Define a regra para acessar o painel do Traefik
      # Substitua 'traefik.seudominio.com' pelo seu próprio subdomínio
      # - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.seudominio.com`)"

      # Acessa o painel via HTTPS
      # - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"

      # Usa o serviço interno de API do Traefik
      # - "traefik.http.routers.traefik-dashboard.service=api@internal"

      # Usa o resolver de certificados configurado para HTTPS
      # - "traefik.http.routers.traefik-dashboard.tls.certresolver=leresolver"
      
      # Adiciona autenticação básica para o painel do Traefik
      # Para gerar o usuário e senha criptografados, siga os passos abaixo:
      # 1. Instale o utilitário Apache: 'sudo apt-get install apache2-utils -y'
      # 2. Gere o par usuário/senha com: 'htpasswd -nbB USUARIO SENHA'
      # 3. Substitua 'usuario:senha_criptografada' pelo resultado do comando acima
      # - "traefik.http.middlewares.traefik-auth.basicauth.users=usuario:senha_criptografada"

      # Aplica a autenticação ao painel do Traefik
      # - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"      

    # Coloca o Traefik na rede pública configurada
    networks:
      - traefik

# Define as redes que serão usadas pelos serviços
networks:

  # Usa uma rede Docker já existente chamada 'traefik'
  traefik:

    # O 'external: true' indica que a rede 'traefik' já deve existir previamente.
    # Isso é útil quando você quer que múltiplos serviços compartilhem uma rede
    external: true  
